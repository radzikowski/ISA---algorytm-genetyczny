{% extends base %}


{% block content %}
<div>
<h2>Zadanie:</h2>
Znaleźć maksimum funkcji: F(x)= (x MOD 1) * (COS( 20 * π * x) – SIN(x)) w przedziale &lt;-4; 12&gt;,
z dokładnością 0,001 (10-3).
</div>
<br>
<br>

<form action="" type="POST">
<div class="left">
	<div class="">Podaj przedział rozwiązań [a,b]:</div>
	<div class="a-value"><label>Wpisz a:</label><input name="a-value" type="text" value="{{a}}" class="width-50"></div>
	<div class="b-value"><label>Wpisz b:</label><input name="b-value" type="text" value="{{b}}" class="width-50"></div>

	<div class="clearfix"></div>
	<div class="precision-value ">
		<label>Podaj dokładność rozwiązania (ilość liczb po przecinku):</label>
		<input name="precision-value" type="text" value="{{ precision}}" class="width-50">
	</div>
	<div class="n-value ">
		<label>Podaj rozmiar populacji:</label>
		<input name="population-value" type="text" value="{{ population }}" class="width-50">
	</div>
	<div class="p-value ">
		<label>Podaj pradopodobienstwo krzyżowania od:</label>
		<input name="cross-probability-value" type="text" value="{{ cross_probability }}" class="width-50"> do: 1
	</div>
	<div class="m-value ">
		<label>Podaj pradopodobienstwo mutacji do:</label>
		<input name="mutation-probability-value" type="text" value="{{ mutation_probability }}" class="width-50">
	</div>

</div>
<div class="left">
	<div class="calc"><input id="calculate" type="submit" value="Oblicz" /></div>
</div>
</form>
	<div class="clearfix"></div>

	
	<div class="clearfix"></div>
	<br>
	<br>
	
{#	<table border="1" id="result-tab">
		<tbody>
			<tr>
				<th>Lp.</th>
				<th>x-real</th>
				<th>f(x) - funkcja oceny</th>
				<th>g(x) - funkcja dopasowania</th>
				<th>P(x)</th>
				<th>q(x)</th>
				<th>r</th>
				<th>x po selekcji</th>
				<th>r</th>
				<th>x-bin rodzic</th>
				<th>punkty krzyżowania</th>
				<th>x-bin dziecko</th>
				<th>Pokolenie po krzyżowaniu</th>
				<th>Zmienione bity</th>
				<th>x-bin po mutacji</th>
				<th>x-real po mutacji</th>
				<th>f(x-real) po mutacji</th>
			</tr>
			{% for result in results %}
			<tr>
				<td>{{ loop.index }}</td>
				<td>{{ result.xreal }}</td>
				<td>{{ result.eval_func }}</td>
				<td>{{ result.fit_func }}</td>
				<td>{{ result.probability }}</td>
				<td>{{ result.distribution }}</td>
				<td>{{ result.rand_selection }}</td>
				<td>{{ result.x_after_selection }}</td>
				<td>{{ result.parent_probability }}</td>
				<td>{{ result.xbin_after_selection }}</td>
				<td>{{ result.cross_point }}</td>
				<td>{{ result.xbin_children }}</td>
				<td>{{ result.x_after_cross }}</td>
				<td>{{ result.mutation_bits }}</td>
				<td>{{ result.xbin_after_mutation }}</td>
				<td>{{ result.xreal_after_mutation }}</td>
				<td>{{ result.eval_func_after_mutation }}</td>
			</tr>
			{% endfor %}
		</tbody>
	</table>
#}
</div>

{% endblock %}

{% block javascript %} 
<script type="text/javascript">

Ext.Loader.setConfig({
    enabled: true
});

Ext.require([
    'Ext.grid.*',
    'Ext.data.*',
]);

Ext.onReady(function(){
    Ext.define('lab2', {
        extend: 'Ext.data.Model',
        fields: [
            {name: 'xreal', type: 'float'},
            {name: 'eval_func', type: 'float'},
			{name: 'fit_func', type: 'float'},
            {name: 'probability', type: 'float'},
            {name: 'distribution', type: 'float'},
            {name: 'rand_selection', type: 'float'},
            {name: 'x_after_selection', type: 'float'},
            {name: 'parent_probability', type: 'float'},
            {name: 'xbin_after_selection', type: 'string'},
			{name: 'cross_point', type: 'string'},
			{name: 'xbin_children', type: 'string'},
			{name: 'x_after_cross', type: 'float'},
			{name: 'mutation_bits', type: 'string'},
			{name: 'xbin_after_mutation', type: 'string'},
			{name: 'xreal_after_mutation', type: 'float'},
			{name: 'eval_func_after_mutation', type: 'float'}
         ]
    });

    // Array data for the grids
    {% autoescape false %}
    Ext.grid.dummyData = {{ resultsInJson }};
    {% endautoescape %}

    var getLocalStore = function() {
        return Ext.create('Ext.data.ArrayStore', {
            model: 'lab2',
            data: Ext.grid.dummyData
        });
    };

    var grid3 = Ext.create('Ext.grid.Panel', {
        store: getLocalStore(),
        columns: [
            Ext.create('Ext.grid.RowNumberer'),
            {text: "x-real", width: 120, sortable: true, dataIndex: 'xreal'},
            {text: "f(x)", width: 120, sortable: true, dataIndex: 'eval_func'},
			{text: "g(x)", width: 120, sortable: true, dataIndex: 'fit_func'},
            {text: "P(x)", width: 120, sortable: true, dataIndex: 'probability'},
            {text: "q(x)", width: 120, sortable: true, dataIndex: 'distribution'},
            {text: "r", width: 120, sortable: true, dataIndex: 'rand_selection'},
            {text: "x po selekcji", width: 120, sortable: true, dataIndex: 'x_after_selection'},
            {text: "r", width: 120, sortable: true, dataIndex: 'parent_probability'},
            {text: "x-bin rodzic", width: 120, sortable: true, dataIndex: 'xbin_after_selection'},
			{text: "punkty krzyżowania", width: 120, sortable: true, dataIndex: 'cross_point'},
			{text: "x-bin dziecko", width: 120, sortable: true, dataIndex: 'xbin_children'},
			{text: "Pokolenie po krzyżowaniu", width: 120, sortable: true, dataIndex: 'x_after_cross'},
			{text: "Zmienione bity", width: 120, sortable: true, dataIndex: 'mutation_bits'},
			{text: "x-bin po mutacji", width: 120, sortable: true, dataIndex: 'xbin_after_mutation'},
			{text: "x-real po mutacji", width: 120, sortable: true, dataIndex: 'xreal_after_mutation'},
			{text: "f(x-real) po mutacji", width: 120, sortable: true, dataIndex: 'eval_func_after_mutation'}
        ],
        columnLines: true,
        title:'Wartość populacji',
        height : 600,
        iconCls:'icon-grid',
        renderTo: Ext.getBody()
    });
});

    </script>
{% endblock %}
